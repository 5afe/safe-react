/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ChocofactoryInterface extends ethers.utils.Interface {
  functions: {
    "deploy(address,string,string)": FunctionFragment;
    "deployWithSig(address,address,string,string,bytes)": FunctionFragment;
    "deployWithTypedSig(address,address,string,string,bytes)": FunctionFragment;
    "predictDeployResult(address,address,string,string)": FunctionFragment;
    "verifySig(address,address,string,string,bytes)": FunctionFragment;
    "verifyTypedSig(address,address,string,string,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWithSig",
    values: [string, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWithTypedSig",
    values: [string, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "predictDeployResult",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySig",
    values: [string, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTypedSig",
    values: [string, string, string, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWithTypedSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictDeployResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifySig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTypedSig",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address,address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export class Chocofactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ChocofactoryInterface;

  functions: {
    deploy(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deploy(address,string,string)"(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deployWithSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployWithSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    deployWithTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deployWithTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    predictDeployResult(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "predictDeployResult(address,address,string,string)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifySig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifySig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  deploy(
    implementation: string,
    name: string,
    symbol: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deploy(address,string,string)"(
    implementation: string,
    name: string,
    symbol: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deployWithSig(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployWithSig(address,address,string,string,bytes)"(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  deployWithTypedSig(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deployWithTypedSig(address,address,string,string,bytes)"(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  predictDeployResult(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "predictDeployResult(address,address,string,string)"(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    overrides?: CallOverrides
  ): Promise<string>;

  verifySig(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifySig(address,address,string,string,bytes)"(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyTypedSig(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyTypedSig(address,address,string,string,bytes)"(
    implementation: string,
    owner: string,
    name: string,
    symbol: string,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    deploy(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deploy(address,string,string)"(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployWithSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployWithSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deployWithTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployWithTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    predictDeployResult(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "predictDeployResult(address,address,string,string)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    verifySig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifySig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Deployed(
      owner: string | null,
      implementation: string | null,
      deployedContract: string | null,
      name: null,
      symbol: null
    ): EventFilter;
  };

  estimateGas: {
    deploy(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deploy(address,string,string)"(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deployWithSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployWithSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    deployWithTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deployWithTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    predictDeployResult(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "predictDeployResult(address,address,string,string)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifySig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deploy(address,string,string)"(
      implementation: string,
      name: string,
      symbol: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deployWithSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployWithSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    deployWithTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deployWithTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    predictDeployResult(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "predictDeployResult(address,address,string,string)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifySig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTypedSig(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyTypedSig(address,address,string,string,bytes)"(
      implementation: string,
      owner: string,
      name: string,
      symbol: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
