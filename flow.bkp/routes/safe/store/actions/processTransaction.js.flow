// @flow
import type { Dispatch as ReduxDispatch } from 'redux';
import semverSatisfies from 'semver/functions/satisfies';
import { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts';
import { type NotificationsQueue, getNotificationsFromTxType, showSnackbar } from 'src/logic/notifications';
import { generateSignaturesFromTxConfirmations } from 'src/logic/safe/safeTxSigner';
import { type NotifiedTransaction, getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions';
import { SAFE_VERSION_FOR_OFFCHAIN_SIGNATURES, tryOffchainSigning } from 'src/logic/safe/transactions/offchainSigner';
import { getCurrentSafeVersion } from 'src/logic/safe/utils/safeVersion';
import { providerSelector } from 'src/logic/wallets/store/selectors';
import fetchSafe from 'src/routes/safe/store/actions/fetchSafe';
import fetchTransactions from 'src/routes/safe/store/actions/fetchTransactions';
import { getLastTx, getNewTxNonce, shouldExecuteTransaction } from 'src/routes/safe/store/actions/utils';
import { type Transaction } from 'src/routes/safe/store/models/transaction';
import { type GlobalState } from 'src/store';
import { getErrorMessage } from 'src/test/utils/ethereumErrors';
type ProcessTransactionArgs = {
  safeAddress: string,
  tx: Transaction,
  userAddress: string,
  notifiedTransaction: NotifiedTransaction,
  enqueueSnackbar: Function,
  closeSnackbar: Function,
  approveAndExecute?: boolean,
};
declare var processTransaction: (arg0: ProcessTransactionArgs) => any;
export default processTransaction;