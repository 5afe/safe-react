// @flow
import { BigNumber } from 'bignumber.js';
import { List, Map } from 'immutable';
import type { Dispatch as ReduxDispatch } from 'redux';
import updateSafe from './updateSafe';
import { getOnlyBalanceToken, getStandardTokenContract } from 'src/logic/tokens/store/actions/fetchTokens';
import { type Token } from 'src/logic/tokens/store/model/token';
import { ETH_ADDRESS } from 'src/logic/tokens/utils/tokenHelpers';
import { sameAddress } from 'src/logic/wallets/ethAddresses';
import { ETHEREUM_NETWORK, getWeb3 } from 'src/logic/wallets/getWeb3';
import { type GlobalState } from 'src/store/index';
import { NETWORK } from 'src/utils/constants'; // List of all the non-standard ERC20 tokens

const nonStandardERC20 = [// DATAcoin
{
  network: ETHEREUM_NETWORK.RINKEBY,
  address: '0x0cf0ee63788a0849fe5297f3407f701e122cc023'
}]; // This is done due to an issues with DATAcoin contract in Rinkeby
// https://rinkeby.etherscan.io/address/0x0cf0ee63788a0849fe5297f3407f701e122cc023#readContract
// It doesn't have a `balanceOf` method implemented.

declare var isStandardERC20: (address: string) => boolean;
declare var getTokenBalances: (tokens: List<Token>, safeAddress: string) => any;
declare export var calculateBalanceOf: (tokenAddress: string, safeAddress: string, decimals: number) => any;
declare var fetchTokenBalances: (safeAddress: string, tokens: List<Token>) => any;
export default fetchTokenBalances;