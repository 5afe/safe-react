// @flow
import { push } from 'connected-react-router';
import type { GetState, Dispatch as ReduxDispatch } from 'redux';
import semverSatisfies from 'semver/functions/satisfies';
import { onboardUser } from 'src/components/ConnectButton';
import { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts';
import { type NotificationsQueue, getNotificationsFromTxType, showSnackbar } from 'src/logic/notifications';
import { CALL, type NotifiedTransaction, getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions';
import { SAFE_VERSION_FOR_OFFCHAIN_SIGNATURES, tryOffchainSigning } from 'src/logic/safe/transactions/offchainSigner';
import { getCurrentSafeVersion } from 'src/logic/safe/utils/safeVersion';
import { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses';
import { EMPTY_DATA } from 'src/logic/wallets/ethTransactions';
import { providerSelector } from 'src/logic/wallets/store/selectors';
import { SAFELIST_ADDRESS } from 'src/routes/routes';
import fetchTransactions from 'src/routes/safe/store/actions/fetchTransactions';
import { getLastTx, getNewTxNonce, shouldExecuteTransaction } from 'src/routes/safe/store/actions/utils';
import { type GlobalState } from 'src/store';
import { getErrorMessage } from 'src/test/utils/ethereumErrors';
export type CreateTransactionArgs = {
  safeAddress: string,
  to: string,
  valueInWei: string,
  txData: string,
  notifiedTransaction: $Values<NotifiedTransaction>,
  enqueueSnackbar: Function,
  closeSnackbar: Function,
  txNonce?: number,
  operation?: 0 | 1,
  navigateToTransactionsTab?: boolean,
  origin?: string | null,
};
declare var createTransaction: (arg0: CreateTransactionArgs) => any;
export default createTransaction;