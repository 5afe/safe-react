// @flow
import { push } from 'connected-react-router';
import { List, Map } from 'immutable';
import type { Action, Store } from 'redux';
import { NOTIFICATIONS, enhanceSnackbarForAction } from '~/logic/notifications';
import closeSnackbarAction from '~/logic/notifications/store/actions/closeSnackbar';
import enqueueSnackbar from '~/logic/notifications/store/actions/enqueueSnackbar';
import { getAwaitingTransactions } from '~/logic/safe/transactions/awaitingTransactions';
import { getSafeVersionInfo } from '~/logic/safe/utils/safeVersion';
import { isUserOwner } from '~/logic/wallets/ethAddresses';
import { userAccountSelector } from '~/logic/wallets/store/selectors';
import { getIncomingTxAmount } from '~/routes/safe/components/Transactions/TxsTable/columns';
import { grantedSelector } from '~/routes/safe/container/selector';
import { ADD_INCOMING_TRANSACTIONS } from '~/routes/safe/store/actions/addIncomingTransactions';
import { ADD_SAFE } from '~/routes/safe/store/actions/addSafe';
import { ADD_TRANSACTIONS } from '~/routes/safe/store/actions/addTransactions';
import updateSafe from '~/routes/safe/store/actions/updateSafe';
import { safeParamAddressFromStateSelector, safesMapSelector } from '~/routes/safe/store/selectors';
import { type GlobalState } from '~/store/';
import { loadFromStorage, saveToStorage } from '~/utils/storage';
const watchedActions = [ADD_TRANSACTIONS, ADD_INCOMING_TRANSACTIONS, ADD_SAFE];
declare var sendAwaitingTransactionNotification: (dispatch: Function, safeAddress: string, awaitingTxsSubmissionDateList: List[], notificationKey: string, notificationClickedCb: Function) => any;
declare var notificationsMiddleware: (store: Store<GlobalState>) => any;
export default notificationsMiddleware;