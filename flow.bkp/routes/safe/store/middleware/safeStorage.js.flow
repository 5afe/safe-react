// @flow
import { List } from 'immutable';
import type { Action, Store } from 'redux';
import { makeAddressBookEntry } from '~/logic/addressBook/model/addressBook';
import { addAddressBookEntry } from '~/logic/addressBook/store/actions/addAddressBookEntry';
import { saveDefaultSafe, saveSafes } from '~/logic/safe/utils';
import type { Token } from '~/logic/tokens/store/model/token';
import { tokensSelector } from '~/logic/tokens/store/selectors';
import { saveActiveTokens } from '~/logic/tokens/utils/tokensStorage';
import { ACTIVATE_TOKEN_FOR_ALL_SAFES } from '~/routes/safe/store/actions/activateTokenForAllSafes';
import { ADD_SAFE } from '~/routes/safe/store/actions/addSafe';
import { ADD_SAFE_OWNER } from '~/routes/safe/store/actions/addSafeOwner';
import { EDIT_SAFE_OWNER } from '~/routes/safe/store/actions/editSafeOwner';
import { REMOVE_SAFE } from '~/routes/safe/store/actions/removeSafe';
import { REMOVE_SAFE_OWNER } from '~/routes/safe/store/actions/removeSafeOwner';
import { REPLACE_SAFE_OWNER } from '~/routes/safe/store/actions/replaceSafeOwner';
import { SET_DEFAULT_SAFE } from '~/routes/safe/store/actions/setDefaultSafe';
import { UPDATE_SAFE } from '~/routes/safe/store/actions/updateSafe';
import { getActiveTokensAddressesForAllSafes, safesMapSelector } from '~/routes/safe/store/selectors';
import { type GlobalState } from '~/store/';
const watchedActions = [ADD_SAFE, UPDATE_SAFE, REMOVE_SAFE, ADD_SAFE_OWNER, REMOVE_SAFE_OWNER, REPLACE_SAFE_OWNER, EDIT_SAFE_OWNER, ACTIVATE_TOKEN_FOR_ALL_SAFES, SET_DEFAULT_SAFE];
declare var recalculateActiveTokens: (state: GlobalState) => void;
declare var safeStorageMware: (store: Store<GlobalState>) => any;
export default safeStorageMware;