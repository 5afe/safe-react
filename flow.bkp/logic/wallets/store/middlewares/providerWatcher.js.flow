// @flow
import type { AnyAction, Store } from 'redux';
import closeSnackbar from 'src/logic/notifications/store/actions/closeSnackbar';
import { WALLET_PROVIDER, getProviderInfo, getWeb3 } from 'src/logic/wallets/getWeb3';
import { fetchProvider } from 'src/logic/wallets/store/actions';
import { ADD_PROVIDER } from 'src/logic/wallets/store/actions/addProvider';
import { REMOVE_PROVIDER } from 'src/logic/wallets/store/actions/removeProvider';
import { type GlobalState } from 'src/store/';
import { loadFromStorage, removeFromStorage, saveToStorage } from 'src/utils/storage';
const watchedActions = [ADD_PROVIDER, REMOVE_PROVIDER];
const LAST_USED_PROVIDER_KEY = 'LAST_USED_PROVIDER';
declare export var loadLastUsedProvider: () => any;
let watcherInterval = null;
declare var providerWatcherMware: (store: Store<GlobalState>) => any;
export default providerWatcherMware;