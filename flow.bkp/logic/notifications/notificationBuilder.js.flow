// @flow
import { IconButton } from '@material-ui/core';
import { Close as IconClose } from '@material-ui/icons';
import * as React from 'react';
import { NOTIFICATIONS, type Notification } from './notificationTypes';
import closeSnackbarAction from 'src/logic/notifications/store/actions/closeSnackbar';
import { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions';
import { getAppInfo } from 'src/routes/safe/components/Apps/appsList';
import { store } from 'src/store';
export type NotificationsQueue = {
  beforeExecution: Notification | null,
  pendingExecution: Notification | null,
  waitingConfirmation?: Notification | null,
  afterExecution: {
    noMoreConfirmationsNeeded: Notification | null,
    moreConfirmationsNeeded: Notification | null,
  } | null,
  afterExecutionError: Notification | null,
  afterRejection: Notification | null,
};
declare var setNotificationOrigin: (notification: Notification, origin: string) => Notification;
declare var getStandardTxNotificationsQueue: (origin?: string) => NotificationsQueue;
const waitingTransactionNotificationsQueue: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  waitingConfirmation: NOTIFICATIONS.TX_WAITING_MSG,
  afterExecution: null,
  afterExecutionError: null
};
declare var getConfirmationTxNotificationsQueue: (origin?: string) => NotificationsQueue;
declare var getCancellationTxNotificationsQueue: (origin?: string) => NotificationsQueue;
const safeNameChangeNotificationsQueue: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.SAFE_NAME_CHANGED_MSG,
    moreConfirmationsNeeded: null
  },
  afterExecutionError: null
};
const ownerNameChangeNotificationsQueue: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.OWNER_NAME_CHANGE_EXECUTED_MSG,
    moreConfirmationsNeeded: null
  },
  afterExecutionError: null
};
const settingsChangeTxNotificationsQueue: NotificationsQueue = {
  beforeExecution: NOTIFICATIONS.SIGN_SETTINGS_CHANGE_MSG,
  pendingExecution: NOTIFICATIONS.SETTINGS_CHANGE_PENDING_MSG,
  afterRejection: NOTIFICATIONS.SETTINGS_CHANGE_REJECTED_MSG,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.SETTINGS_CHANGE_EXECUTED_MSG,
    moreConfirmationsNeeded: NOTIFICATIONS.SETTINGS_CHANGE_EXECUTED_MORE_CONFIRMATIONS_MSG
  },
  afterExecutionError: NOTIFICATIONS.SETTINGS_CHANGE_FAILED_MSG
};
const defaultNotificationsQueue: NotificationsQueue = {
  beforeExecution: NOTIFICATIONS.SIGN_TX_MSG,
  pendingExecution: NOTIFICATIONS.TX_PENDING_MSG,
  afterRejection: NOTIFICATIONS.TX_REJECTED_MSG,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.TX_EXECUTED_MSG,
    moreConfirmationsNeeded: NOTIFICATIONS.TX_EXECUTED_MORE_CONFIRMATIONS_MSG
  },
  afterExecutionError: NOTIFICATIONS.TX_FAILED_MSG
};
const addressBookNewEntry: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  waitingConfirmation: null,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.ADDRESS_BOOK_NEW_ENTRY_SUCCESS,
    moreConfirmationsNeeded: null
  },
  afterExecutionError: null
};
const addressBookEditEntry: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  waitingConfirmation: null,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.ADDRESS_BOOK_EDIT_ENTRY_SUCCESS,
    moreConfirmationsNeeded: null
  },
  afterExecutionError: null
};
const addressBookDeleteEntry: NotificationsQueue = {
  beforeExecution: null,
  pendingExecution: null,
  afterRejection: null,
  waitingConfirmation: null,
  afterExecution: {
    noMoreConfirmationsNeeded: NOTIFICATIONS.ADDRESS_BOOK_DELETE_ENTRY_SUCCESS,
    moreConfirmationsNeeded: null
  },
  afterExecutionError: null
};
declare export var getNotificationsFromTxType: (txType: string, origin?: string) => any;
declare export var enhanceSnackbarForAction: (notification: Notification, key?: string, onClick?: Function) => any;
declare export var showSnackbar: (notification: Notification, enqueueSnackbar: Function, closeSnackbar: Function) => any;