// @flow
import { type FieldValidator } from 'final-form';
import { List } from 'immutable';
import { sameAddress } from 'src/logic/wallets/ethAddresses';
import { getWeb3 } from 'src/logic/wallets/getWeb3';
declare export var simpleMemoize: (fn: Function) => any;
type Field = boolean | string | null | typeof undefined;
declare export var required: (value: Field) => any;
declare export var mustBeInteger: (value: string) => any;
declare export var mustBeFloat: (value: number) => any;
declare export var greaterThan: (min: number) => any;
const regexQuery = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;
const url = new RegExp(regexQuery);
declare export var mustBeUrl: (value: string) => any;
declare export var minValue: (min: number) => any;
declare export var maxValue: (max: number | string) => any;
declare export var ok: () => any;
export const mustBeEthereumAddress = simpleMemoize((address: string) => {
  const startsWith0x = address.startsWith('0x');
  const isAddress: boolean = getWeb3().utils.isAddress(address);
  return startsWith0x && isAddress ? undefined : 'Address should be a valid Ethereum address or ENS name';
});
export const mustBeEthereumContractAddress = simpleMemoize(async (address: string) => {
  const contractCode: string = await getWeb3().eth.getCode(address);
  return !contractCode || contractCode.replace('0x', '').replace(/0/g, '') === '' ? 'Address should be a valid Ethereum contract address or ENS name' : undefined;
});
declare export var minMaxLength: (minLen: string | number, maxLen: string | number) => any;
export const ADDRESS_REPEATED_ERROR = 'Address already introduced';
declare export var uniqueAddress: (addresses: string[] | List<string>) => any;
declare export var composeValidators: (...validators: Function[]) => FieldValidator;
declare export var inLimit: (limit: number, base: number, baseText: string, symbol: string) => any;
declare export var differentFrom: (diffValue: string | number) => any;
declare export var noErrorsOn: (name: string, errors: Object) => any;