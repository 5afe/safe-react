// @flow
import * as React from 'react';
import { type Store } from 'redux';
import { render, fireEvent, act } from '@testing-library/react';
import { Provider } from 'react-redux';
import { ConnectedRouter } from 'connected-react-router';
import { sleep } from 'src/utils/timer';
import { ADD_OWNER_BUTTON } from 'src/routes/open/components/SafeOwnersConfirmationsForm';
import Open from 'src/routes/open/container/Open';
import { aNewStore, history, type GlobalState } from 'src/store';
import { getProviderInfo, getWeb3 } from 'src/logic/wallets/getWeb3';
import addProvider from 'src/logic/wallets/store/actions/addProvider';
import { makeProvider } from 'src/logic/wallets/store/model/provider';
import { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts';
import { whenSafeDeployed } from './builder/safe.dom.utils'; // For some reason it warns about events not wrapped in act
// But they're wrapped :(

const originalError = console.error;
beforeAll(() => {
  console.error = (...args) => {
    if (/Warning.*not wrapped in act/.test(args[0])) {
      return;
    }

    originalError.call(console, ...args);
  };
});
afterAll(() => {
  console.error = originalError;
});
declare var renderOpenSafeForm: (localStore: Store<GlobalState>) => any;
declare var deploySafe: (createSafeForm: any, threshold: number, numOwners: number) => any;
declare var aDeployedSafe: (specificStore: Store<GlobalState>, threshold?: number, numOwners?: number) => any;
describe('DOM > Feature > CREATE a Safe', () => {
  it('fills correctly the Safe form with 4 owners and 4 threshold and creates a Safe', async () => {
    const owners = 4;
    const threshold = 4;
    const store = aNewStore();
    const address = await aDeployedSafe(store, threshold, owners);
    expect(address).not.toBe(null);
    expect(address).not.toBe(undefined);
    const gnosisSafe = await getGnosisSafeInstanceAt(address);
    const storedOwners = await gnosisSafe.getOwners();
    expect(storedOwners.length).toEqual(4);
    const safeThreshold = await gnosisSafe.getThreshold();
    expect(Number(safeThreshold)).toEqual(4);
  });
});