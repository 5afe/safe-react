// @flow
import * as React from 'react';
import TestUtils from 'react-dom/test-utils';
import { type Store } from 'redux';
import { Provider } from 'react-redux';
import { render } from '@testing-library/react';
import { ConnectedRouter } from 'connected-react-router';
import PageFrame from 'src/components/layout/PageFrame';
import ListItemText from 'src/components/List/ListItemText/index';
import fetchTransactions from 'src/routes/safe/store/actions/fetchTransactions';
import { sleep } from 'src/utils/timer';
import { history, type GlobalState } from 'src/store';
import AppRoutes from 'src/routes';
import { SAFELIST_ADDRESS } from 'src/routes/routes';
import { EMPTY_DATA } from 'src/logic/wallets/ethTransactions';
export const EXPAND_BALANCE_INDEX = 0;
export const EXPAND_OWNERS_INDEX = 1;
export const ADD_OWNERS_INDEX = 2;
export const EDIT_THRESHOLD_INDEX = 3;
export const EDIT_INDEX = 4;
export const WITHDRAW_INDEX = 5;
export const LIST_TXS_INDEX = 6;
declare export var checkMinedTx: (Transaction: React.Component<any, any>, name: string) => any;
declare export var getListItemsFrom: (Transaction: React.Component<any, any>) => any;
declare export var expand: (Transaction: React.Component<any, any>) => any;
declare export var checkPendingTx: (Transaction: React.Component<any, any>, safeThreshold: number, name: string, statusses: string[]) => any;
declare export var refreshTransactions: (store: Store<GlobalState>, safeAddress: string) => any;
declare var renderApp: (store: Store) => any;
declare export var renderSafeView: (store: Store<GlobalState>, address: string) => any;
const INTERVAL = 500;
const MAX_TIMES_EXECUTED = 30;
declare export var whenSafeDeployed: () => Promise<string>;