{
  "contractName": "MultiSend",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "transactions",
          "type": "bytes"
        }
      ],
      "name": "multiSend",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b50610169806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638d80ff0a14610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506100af565b005b805160205b81811015610138578083015160208201840151604083018501516080840186015160a085018701600085600081146100f357600181146101035761010e565b6000808585888a5af1915061010e565b6000808585895af491505b50600081141561011d57600080fd5b602080601f8501040260a001870196505050505050506100b4565b5050505600a165627a7a72305820c1abf4988401674d6d6a5ceca56de123817c61305360ceffe26ebab59a828b7d0029",
  "deployedBytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680638d80ff0a14610046575b600080fd5b34801561005257600080fd5b506100ad600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506100af565b005b805160205b81811015610138578083015160208201840151604083018501516080840186015160a085018701600085600081146100f357600181146101035761010e565b6000808585888a5af1915061010e565b6000808585895af491505b50600081141561011d57600080fd5b602080601f8501040260a001870196505050505050506100b4565b5050505600a165627a7a72305820c1abf4988401674d6d6a5ceca56de123817c61305360ceffe26ebab59a828b7d0029",
  "sourceMap": "253:1424:17:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;253:1424:17;;;;;;;",
  "deployedSourceMap": "253:1424:17:-;;;;;;;;;;;;;;;;;;;;;;;;695:980;;8:9:-1;5:2;;;30:1;27;20:12;5:2;695:980:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;870:12;864:19;905:4;922:737;936:6;933:1;930:13;922:737;;;1007:1;993:12;989:20;983:27;1068:4;1065:1;1061:12;1047;1043:31;1037:38;1136:4;1133:1;1129:12;1115;1111:31;1105:38;1209:4;1206:1;1202:12;1188;1184:31;1178:38;1270:4;1267:1;1263:12;1249;1245:31;1308:1;1333:9;1365:1;1360:66;;;;1448:1;1443:67;;;;1326:184;;1360:66;1422:1;1419;1407:10;1401:4;1394:5;1390:2;1385:3;1380:44;1369:55;;1360:66;;1443:67;1506:1;1503;1491:10;1485:4;1481:2;1476:3;1463:45;1452:56;;1326:184;;1542:1;1533:7;1530:14;1527:2;;;1557:1;1554;1547:12;1527:2;1638:4;1631;1624;1612:10;1608:21;1604:32;1600:43;1594:4;1590:54;1587:1;1583:62;1578:67;;948:711;;;;;;922:737;;;836:833;;;:::o",
  "source": "pragma solidity 0.4.24;\n\n\n/// @title Multi Send - Allows to batch multiple transactions into one.\n/// @author Nick Dodson - <nick.dodson@consensys.net>\n/// @author Gonçalo Sá - <goncalo.sa@consensys.net>\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract MultiSend {\n\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a \n    ///                     tuple(operation,address,uint256,bytes), where operation \n    ///                     can be 0 for a call or 1 for a delegatecall. The bytes \n    ///                     of all encoded transactions are concatenated to form the input.\n    function multiSend(bytes transactions)\n        public\n    {\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for { } lt(i, length) { } {\n                let operation := mload(add(transactions, i))\n                let to := mload(add(transactions, add(i, 0x20)))\n                let value := mload(add(transactions, add(i, 0x40)))\n                let dataLength := mload(add(transactions, add(i, 0x80)))\n                let data := add(transactions, add(i, 0xa0))\n                let success := 0\n                switch operation \n                case 0 { success := call(gas, to, value, data, dataLength, 0, 0) }\n                case 1 { success := delegatecall(gas, to, data, dataLength, 0, 0) }\n                if eq(success, 0) { revert(0, 0) }\n                i := add(i, add(0xa0, mul(div(add(dataLength, 0x1f), 0x20), 0x20)))\n            }\n        }\n    }\n}\n",
  "sourcePath": "/Users/apanizo/git/gnosis/safe-contracts/contracts/libraries/MultiSend.sol",
  "ast": {
    "absolutePath": "/Users/apanizo/git/gnosis/safe-contracts/contracts/libraries/MultiSend.sol",
    "exportedSymbols": {
      "MultiSend": [
        1840
      ]
    },
    "id": 1841,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1832,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:17"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Multi Send - Allows to batch multiple transactions into one.\n @author Nick Dodson - <nick.dodson@consensys.net>\n @author Gonçalo Sá - <goncalo.sa@consensys.net>\n @author Stefan George - <stefan@gnosis.pm>",
        "fullyImplemented": true,
        "id": 1840,
        "linearizedBaseContracts": [
          1840
        ],
        "name": "MultiSend",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1838,
              "nodeType": "Block",
              "src": "753:922:17",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "870:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "993:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1047:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1188:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1115:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1249:12:17",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1837,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let length := mload(transactions)\n    let i := 0x20\n    for {\n    }\n    lt(i, length)\n    {\n    }\n    {\n        let operation := mload(add(transactions, i))\n        let to := mload(add(transactions, add(i, 0x20)))\n        let value := mload(add(transactions, add(i, 0x40)))\n        let dataLength := mload(add(transactions, add(i, 0x80)))\n        let data := add(transactions, add(i, 0xa0))\n        let success := 0\n        switch operation\n        case 0 {\n            success := call(gas(), to, value, data, dataLength, 0, 0)\n        }\n        case 1 {\n            success := delegatecall(gas(), to, data, dataLength, 0, 0)\n        }\n        if eq(success, 0)\n        {\n            revert(0, 0)\n        }\n        i := add(i, add(0xa0, mul(div(add(dataLength, 0x1f), 0x20), 0x20)))\n    }\n}",
                  "src": "827:848:17"
                }
              ]
            },
            "documentation": "@dev Sends multiple transactions and reverts all if one fails.\n @param transactions Encoded transactions. Each transaction is encoded as a \n                     tuple(operation,address,uint256,bytes), where operation \n                     can be 0 for a call or 1 for a delegatecall. The bytes \n                     of all encoded transactions are concatenated to form the input.",
            "id": 1839,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "multiSend",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1834,
                  "name": "transactions",
                  "nodeType": "VariableDeclaration",
                  "scope": 1839,
                  "src": "714:18:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1833,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "714:5:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "713:20:17"
            },
            "payable": false,
            "returnParameters": {
              "id": 1836,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "753:0:17"
            },
            "scope": 1840,
            "src": "695:980:17",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1841,
        "src": "253:1424:17"
      }
    ],
    "src": "0:1678:17"
  },
  "legacyAST": {
    "absolutePath": "/Users/apanizo/git/gnosis/safe-contracts/contracts/libraries/MultiSend.sol",
    "exportedSymbols": {
      "MultiSend": [
        1840
      ]
    },
    "id": 1841,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1832,
        "literals": [
          "solidity",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:17"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Multi Send - Allows to batch multiple transactions into one.\n @author Nick Dodson - <nick.dodson@consensys.net>\n @author Gonçalo Sá - <goncalo.sa@consensys.net>\n @author Stefan George - <stefan@gnosis.pm>",
        "fullyImplemented": true,
        "id": 1840,
        "linearizedBaseContracts": [
          1840
        ],
        "name": "MultiSend",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1838,
              "nodeType": "Block",
              "src": "753:922:17",
              "statements": [
                {
                  "externalReferences": [
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "870:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "993:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1047:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1188:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1115:12:17",
                        "valueSize": 1
                      }
                    },
                    {
                      "transactions": {
                        "declaration": 1834,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "1249:12:17",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1837,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let length := mload(transactions)\n    let i := 0x20\n    for {\n    }\n    lt(i, length)\n    {\n    }\n    {\n        let operation := mload(add(transactions, i))\n        let to := mload(add(transactions, add(i, 0x20)))\n        let value := mload(add(transactions, add(i, 0x40)))\n        let dataLength := mload(add(transactions, add(i, 0x80)))\n        let data := add(transactions, add(i, 0xa0))\n        let success := 0\n        switch operation\n        case 0 {\n            success := call(gas(), to, value, data, dataLength, 0, 0)\n        }\n        case 1 {\n            success := delegatecall(gas(), to, data, dataLength, 0, 0)\n        }\n        if eq(success, 0)\n        {\n            revert(0, 0)\n        }\n        i := add(i, add(0xa0, mul(div(add(dataLength, 0x1f), 0x20), 0x20)))\n    }\n}",
                  "src": "827:848:17"
                }
              ]
            },
            "documentation": "@dev Sends multiple transactions and reverts all if one fails.\n @param transactions Encoded transactions. Each transaction is encoded as a \n                     tuple(operation,address,uint256,bytes), where operation \n                     can be 0 for a call or 1 for a delegatecall. The bytes \n                     of all encoded transactions are concatenated to form the input.",
            "id": 1839,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "multiSend",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1835,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1834,
                  "name": "transactions",
                  "nodeType": "VariableDeclaration",
                  "scope": 1839,
                  "src": "714:18:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 1833,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "714:5:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "713:20:17"
            },
            "payable": false,
            "returnParameters": {
              "id": 1836,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "753:0:17"
            },
            "scope": 1840,
            "src": "695:980:17",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1841,
        "src": "253:1424:17"
      }
    ],
    "src": "0:1678:17"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "4": {
      "events": {},
      "links": {},
      "address": "0xe94c33a523bf201e412f601eff906eec0b1d21f5",
      "transactionHash": "0x1f04811d6fb97329f6e96a579587fe5a3abe9fe2f202d4b2e27adb78d3de1c48"
    },
    "1529327661534": {
      "events": {},
      "links": {},
      "address": "0xa2a1eb294e1191c1e374f9015a37db35c49e9f26",
      "transactionHash": "0x5cd2551fce05a8b864a085616ee54449fdddd56dcdebf1019bebd0839c69ef5f"
    },
    "1529333415702": {
      "events": {},
      "links": {},
      "address": "0xaba1a0da223a2a5e04158bd80b2af7671e27e2c6",
      "transactionHash": "0x6e7c0c3947a3a851738677ae63915781ce79fdfb0453030fc63bbcd346f2cf89"
    }
  },
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-06-20T07:58:01.355Z"
}